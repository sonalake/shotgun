
buildscript {
  repositories {
    mavenCentral()
  }
}


plugins {
  id 'java'
  id 'com.github.kt3k.coveralls' version '2.10.1'
  id "io.freefair.lombok" version "4.1.6"
  id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'



// a parameter is defined if it's been passed in and isn't blank
ext.isParameterDefined = { String paramName ->
  return project.hasProperty(paramName) && !project.getProperties().get(paramName).toString().isBlank();
}

// some configs of interest to the developer
// don't try to sign and release if we have the settings we care about
ext.isForSigning = isParameterDefined("signing.keyId") && isParameterDefined("signing.password")
// don't try to publish to OSSRH if there is no username/password
ext.isForOssrhPublishing = isParameterDefined('ossrhUsername') && isParameterDefined('ossrhPassword')
// is this a release or a snapshot
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
// don't try to publish the gradle plugin if there is no key/secret
ext.isForPluginPublishing = isParameterDefined('gradle.publish.key') && isParameterDefined('gradle.publish.secret')


repositories {
  jcenter()
  mavenCentral()
  maven { url "https://repo.spring.io/plugins-release/" }
  maven { url "https://maven.geomajas.org/" }
}


dependencies {
  implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.5.1.201910021850-r'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
  implementation group: 'commons-io', name: 'commons-io', version: '2.6'
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  implementation 'org.jgrapht:jgrapht-core:1.5.0'
  implementation 'org.jgrapht:jgrapht-io:1.5.0'
  implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
  implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.29'
  implementation group: 'com.beust', name: 'jcommander', version: '1.78'


  // Use JUnit Jupiter API for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

  // Use JUnit Jupiter Engine for testing.
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

  testImplementation "org.mockito:mockito-inline:+"
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.1.0'


}


jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }
}
test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

task javadocJar(type: Jar) {
  archiveClassifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}
jar {
  manifest {
    attributes(
      'Main-Class': 'com.sonalake.shotgun.App'
    )
  }
}



